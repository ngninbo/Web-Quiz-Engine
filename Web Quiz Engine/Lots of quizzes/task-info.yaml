type: edu
custom_name: stage2
files:
- name: build.gradle
  visible: true
  text: |-
    buildscript {
        apply plugin: 'hyperskill'

        repositories {
            mavenCentral()
        }
        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
  learner_created: false
- name: src/engine/WebQuizEngine.java
  visible: true
  text: |
    package engine;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class WebQuizEngine {

        public static void main(String[] args) {
            SpringApplication.run(WebQuizEngine.class, args);
        }

    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |
    server.port=8889
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: test/tests/WebQuizEngineTest.java
  visible: false
  text: |
    package tests;

    import com.google.gson.JsonElement;
    import com.google.gson.JsonObject;
    import engine.WebQuizEngine;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.request.HttpRequest;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.Map;

    import static org.hyperskill.hstest.common.JsonUtils.getJson;
    import static org.hyperskill.hstest.common.JsonUtils.getPrettyJson;
    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    public class WebQuizEngineTest extends SpringTest {
        public WebQuizEngineTest() {
            super(WebQuizEngine.class);
        }

        static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        private static int quizId1 = 0;
        private static int quizId2 = 0;

        private static String quiz1 =
            "{\n" +
                "  \"title\": \"The Java Logo\",\n" +
                "  \"text\": \"What is depicted on the Java logo?\",\n" +
                "  \"options\": [\"Robot\",\"Tea leaf\",\"Cup of coffee\",\"Bug\"],\n" +
                "  \"answer\": 2\n" +
                "}";

        private static String quiz2 =
            "{\n" +
                "  \"title\": \"The Ultimate Question\",\n" +
                "  \"text\": \"What is the answer to the Ultimate Question of Life, the Universe and Everything?\",\n" +
                "  \"options\": [\"Everything goes right\",\"42\",\"2+2=4\",\"11011100\"],\n" +
                "  \"answer\": 1\n" +
                "}";

        @DynamicTestingMethod
        public DynamicTesting[] dt = new DynamicTesting[]{
            () -> testAllQuizzes(0),

            () -> testCreateQuiz(1),
            () -> testQuizExists(1),
            () -> testQuizNotExists(1),

            () -> testAllQuizzes(1),

            () -> testCreateQuiz(2),
            () -> testQuizExists(2),
            () -> testQuizNotExists(2),

            () -> testAllQuizzes(2),

            () -> checkQuizSuccess(quizId1, "0", false),
            () -> checkQuizSuccess(quizId1, "1", false),
            () -> checkQuizSuccess(quizId1, "2", true),
            () -> checkQuizSuccess(quizId1, "3", false),

            () -> checkQuizSuccess(quizId2, "0", false),
            () -> checkQuizSuccess(quizId2, "1", true),
            () -> checkQuizSuccess(quizId2, "2", false),
            () -> checkQuizSuccess(quizId2, "3", false),
        };

        private CheckResult testCreateQuiz(int quizNum) {
            String url = "/api/quizzes";
            HttpResponse resp = post(url, quizNum == 1 ? quiz1 : quiz2).send();

            checkStatusCode(resp, 200);

            expect(resp.getContent()).asJson().check(
                isObject()
                    .value("id", isInteger(i -> {
                        if (quizNum == 1) {
                            quizId1 = i;
                        } else {
                            quizId2 = i;
                        }
                        return true;
                    }))
                    .anyOtherValues()
            );

            return CheckResult.correct();
        }

        private CheckResult testQuizExists(int quizNum) {
            int quizId = quizNum == 1 ? quizId1 : quizId2;
            String quiz = quizNum == 1 ? quiz1 : quiz2;

            String url = "/api/quizzes/" + quizId;

            HttpResponse resp = get(url).send();
            checkStatusCode(resp, 200);

            JsonObject rightQuiz = getJson(quiz).getAsJsonObject();
            rightQuiz.remove("answer");
            rightQuiz.addProperty("id", quizId);

            expect(getPrettyJson(rightQuiz)).asJson().check(
                isObject()
                    .value("id", quizId)
                    .value("title", isString())
                    .value("text", isString())
                    .value("options", isArray(any()))
            );

            JsonElement json = resp.getJson();

            CheckResult wrongResponse = CheckResult.wrong(
                "The quiz sent to the program looked like this:\n" +
                    getPrettyJson(rightQuiz) + "\n\n" +
                    "But the received quiz looks like that:\n" +
                    getPrettyJson(json)
            );

            if (!json.isJsonObject()) {
                return wrongResponse;
            }

            JsonObject obj = json.getAsJsonObject();

            if (!rightQuiz.equals(obj)) {
                return wrongResponse;
            }

            return CheckResult.correct();
        }

        private CheckResult testQuizNotExists(int quizNum) {
            int quizId = quizNum == 1 ? quizId1 : quizId2;

            String url = "/api/quizzes/" + (quizId + 125);

            HttpResponse resp = get(url).send();
            checkStatusCode(resp, 404);

            return CheckResult.correct();
        }

        private CheckResult testAllQuizzes(int count) {
            String url = "/api/quizzes";
            HttpResponse resp = get(url).send();

            checkStatusCode(resp, 200);

            expect(resp.getContent()).asJson().check(
                isArray(count, isObject().anyOtherValues())
            );

            return CheckResult.correct();
        }

        private CheckResult checkQuizSuccess(int quizNum, String answerSent, boolean shouldResponse) {
            String url = "/api/quizzes/" + quizNum + "/solve";

            HttpRequest req = post(url, Map.of("answer", answerSent));
            HttpResponse resp = req.send();
            checkStatusCode(resp, 200);

            expect(resp.getContent()).asJson().check(
                isObject()
                    .value("success", shouldResponse)
                    .value("feedback", isString())
            );

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/engine/model/Answer.java
  visible: true
  text: |
    package engine.model;

    import java.util.Objects;

    public class Answer {

        private boolean success;
        private String feedback;

        public Answer(boolean success, String feedback) {
            this.success = success;
            this.feedback = feedback;
        }

        public boolean isSuccess() {
            return success;
        }

        public void setSuccess(boolean success) {
            this.success = success;
        }

        public String getFeedback() {
            return feedback;
        }

        public void setFeedback(String feedback) {
            this.feedback = feedback;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o instanceof Answer)) return false;
            Answer answer = (Answer) o;
            return isSuccess() == answer.isSuccess() && Objects.equals(getFeedback(), answer.getFeedback());
        }

        @Override
        public int hashCode() {
            return Objects.hash(isSuccess(), getFeedback());
        }

        @Override
        public String toString() {
            return "Answer{" +
                    "success=" + success +
                    ", feedback='" + feedback + '\'' +
                    '}';
        }
    }
  learner_created: true
- name: src/engine/service/QuizServiceImpl.java
  visible: true
  text: |
    package engine.service;

    import engine.model.Answer;
    import engine.model.Quiz;
    import engine.repository.QuizRepository;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.stereotype.Service;

    @Service
    public class QuizServiceImpl implements QuizService {

        private final QuizRepository quizRepository;

        @Autowired
        public QuizServiceImpl(QuizRepository quizRepository) {
            this.quizRepository = quizRepository;
        }

        @Override
        public Quiz getDefaultQuiz() {
            return quizRepository.getDefaultQuiz();
        }

        @Override
        public Answer checkResponse(int choice) {
            if (choice == 2) {
                return new Answer(true, "Congratulations, you're right!");
            }
            return new Answer(false, "Wrong answer! Please, try again.");
        }
    }
  learner_created: true
- name: src/engine/service/QuizService.java
  visible: true
  text: |
    package engine.service;

    import engine.model.Answer;
    import engine.model.Quiz;

    public interface QuizService {

        Quiz getDefaultQuiz();
        Answer checkResponse(int choice);
    }
  learner_created: true
- name: src/engine/model/Quiz.java
  visible: true
  text: |
    package engine.model;

    import java.util.List;
    import java.util.Objects;


    public class Quiz {

        private String title;
        private String text;
        private List<String> options;

        public Quiz(String title, String text, List<String> options) {
            this.title = title;
            this.text = text;
            this.options = options;
        }

        public String getTitle() {
            return title;
        }

        public void setTitle(String title) {
            this.title = title;
        }

        public String getText() {
            return text;
        }

        public void setText(String text) {
            this.text = text;
        }

        public List<String> getOptions() {
            return options;
        }

        public void setOptions(List<String> options) {
            this.options = options;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o instanceof Quiz)) return false;
            Quiz quiz = (Quiz) o;
            return Objects.equals(getTitle(), quiz.getTitle()) && Objects.equals(getText(), quiz.getText()) && Objects.equals(getOptions(), quiz.getOptions());
        }

        @Override
        public int hashCode() {
            return Objects.hash(getTitle(), getText(), getOptions());
        }

        @Override
        public String toString() {
            return "Quiz{" +
                    "title='" + title + '\'' +
                    ", text='" + text + '\'' +
                    ", options=" + options +
                    '}';
        }
    }
  learner_created: true
- name: src/engine/repository/QuizRepository.java
  visible: true
  text: |
    package engine.repository;

    import engine.model.Quiz;
    import org.springframework.stereotype.Component;

    import java.util.List;

    @Component
    public class QuizRepository {

        public QuizRepository() {
            super();
        }

        public Quiz getDefaultQuiz() {
            return new Quiz("The Java Logo", "What is depicted on the Java logo?",
                    List.of("Robot", "Tea leaf", "Cup of coffee", "Bug"));
        }
    }
  learner_created: true
- name: src/engine/controller/QuizController.java
  visible: true
  text: |
    package engine.controller;

    import engine.model.Answer;
    import engine.model.Quiz;
    import engine.service.QuizService;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.stereotype.Controller;
    import org.springframework.web.bind.annotation.GetMapping;
    import org.springframework.web.bind.annotation.PostMapping;
    import org.springframework.web.bind.annotation.RequestMapping;
    import org.springframework.web.bind.annotation.RequestParam;

    @Controller
    @RequestMapping("/api")
    public class QuizController {

        private final QuizService quizService;

        @Autowired
        public QuizController(QuizService quizService) {
            this.quizService = quizService;
        }

        @GetMapping("/quiz")
        public ResponseEntity<Quiz> getDefaultQuiz() {
            return new ResponseEntity<>(quizService.getDefaultQuiz(), HttpStatus.OK);
        }

        @PostMapping("/quiz")
        public ResponseEntity<Answer> checkAnswer(@RequestParam String answer) {
            return new ResponseEntity<>(quizService.checkResponse(Integer.parseInt(answer)), HttpStatus.OK);
        }
    }
  learner_created: true
- name: src/engine/dto/QuizDto.java
  visible: true
  learner_created: true
- name: src/engine/dto/AnswerDto.java
  visible: true
  learner_created: true
- name: src/engine/model/QuizAnswer.java
  visible: true
  learner_created: true
- name: src/engine/repository/QuizAnswerRepository.java
  visible: true
  learner_created: true
- name: src/engine/service/QuizAnswerService.java
  visible: true
  learner_created: true
- name: src/engine/service/QuizAnswerServiceImpl.java
  visible: true
  learner_created: true
- name: src/engine/mapper/QuizMapper.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/91/stages/505/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sat, 12 Feb 2022 14:38:04 UTC
record: -1
